{
  "name": "typechecker",
  "version": "2.0.6",
  "description": "Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)",
  "homepage": "https://github.com/bevry/typechecker",
  "keywords": [
    "types",
    "type",
    "check",
    "gettype",
    "isstring",
    "isregexp",
    "isregex",
    "isplainobject",
    "isobject",
    "iserror",
    "isnumber",
    "isdate",
    "isarguments",
    "isarray",
    "isnull",
    "isempty",
    "isundefined",
    "isemptyobject"
  ],
  "author": {
    "name": "Bevry Pty Ltd",
    "email": "us@bevry.me",
    "url": "http://bevry.me"
  },
  "maintainers": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "bugs": {
    "url": "https://github.com/bevry/typechecker/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bevry/typechecker.git"
  },
  "engines": {
    "node": ">=0.4"
  },
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "~1.6.2",
    "joe": "~1.3.0",
    "joe-reporter-console": "~1.2.1"
  },
  "directories": {
    "lib": "./out/lib"
  },
  "scripts": {
    "preinstall": "node ./cyclic.js",
    "test": "node ./out/test/everything-test.js"
  },
  "main": "./out/lib/typechecker.js",
  "readme": "# TypeChecker\n\n[![Build Status](https://secure.travis-ci.org/bevry/typechecker.png?branch=master)](http://travis-ci.org/bevry/typechecker \"Check this project's build status on TravisCI\")\n[![NPM version](https://badge.fury.io/js/typechecker.png)](https://npmjs.org/package/typechecker \"View this project on NPM\")\n[![Gittip donate button](http://badgr.co/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://www.paypalobjects.com/en_AU/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\nUtilities to get and check variable types (isString, isPlainObject, isRegExp, etc)\n\n\n## Install\n\n### [Node](http://nodejs.org/), [Browserify](http://browserify.org/)\n- Use: `require('typechecker')`\n- Install: 'npm install --save typechecker'\n\n### [Ender](http://ender.jit.su/)\n- Use: `require('typechecker')`\n- Install: `ender add typechecker`\n\n## [Component](http://github.com/component/component)\n- Use: `require('typechecker')`\n- Install: `component install bevry/typechecker`\n\n## [Bower](http://bower.io/)\n- Use: `require('typechecker')`\n- Install: `bower install typechecker`\n\n\n## Usage\n\n### Example\n\n``` javascript\nrequire('typechecker').isRegExp(/^a/)  // returns true\n```\n\n### Methods\n\n- `getObjectType` - returns the object string of the value, e.g. when passed `/^a/` it'll return `\"[object RegExp]\"`\n- `getType` - returns lower case string of the type, e.g. when passed `/^a/` it'll return `\"regex\"`\n- `isPlainObject` - returns `true` if the value doesn't have a custom prototype\n- `isError` - returns `true` if the value an error, otherwise `false`\n- `isDate` - returns `true` if the value is a date, otherwise `false`\n- `isArguments` - returns `true` if the value is function arguments, otherwise `false`\n- `isFunction` - returns `true` if the value is a function, otherwise `false`\n- `isRegExp` - returns `true` if the value is a regular expression instance, otherwise `false`\n- `isArray` - returns `true` if the value is an array, otherwise `false`\n- `isNumber` - returns `true` if the value is a number (`\"2\"` is a string), otherwise `false`\n- `isString` - returns `true` if the value is a string, otherwise `false`\n- `isBoolean` - returns `true` if the value is a boolean, otherwise `false`\n- `isNull` - returns `true` if the value is null, otherwise `false`\n- `isUndefined` - returns `true` if the value is undefined, otherwise `false`\n- `isEmpty` - returns `true` if the value is `null` or `undefined`\n- `isEmptyObject` - returns `true` if the object has no keys that are its own\n\n\n### Notes\n\nWhy should I use this instead of say `instanceof`? Under certain circumstances `instanceof` may not return the correct results.\nThis occurs with [node's vm module](http://nodejs.org/api/vm.html#vm_globals) especially, and circumstances where an object's prototype has been dereferenced from the original.\nAs such, for basic `==` and `===` checks (like `a === null`), you're fine not using this, but for checks when you would have done `instanceof` (like `err instanceof Error`), you should try to use this instead.\nPlus things like `isEmptyObject` and `isPlainObject` are darn useful!\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/typechecker/blob/master/History.md#files) file\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n",
  "readmeFilename": "README.md",
  "_id": "typechecker@2.0.6",
  "dist": {
    "shasum": "37f44d8aea4bd586e93a378658e2faf33250b1cd"
  },
  "_from": "typechecker@~2.0.1",
  "_resolved": "https://registry.npmjs.org/typechecker/-/typechecker-2.0.6.tgz"
}
